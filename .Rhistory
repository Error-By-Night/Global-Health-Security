library(dplyr)
library(tidyr)
#Dataset is in a different folder,must call
# Pass in dataset and store in a dataframe variable
GHSindex_summary <- read.csv("data/2021-GHS-Index-April-2022.csv")
# For this lab, you will be using the Titanic Dataset that comes built in with R.
# This line of code loads in the dataset and stores in a dataframe called titanic_df
titanic_df <- data.frame(Titanic)
library(dplyr)
# Before being coding, you should first familiarize yourself with the dataset.
# Start by analyzing the meaning of each coloumn in the dataset.
# Using comments below, describe what information is stored in each column
# For categorical variables, list all possible values
View(titanic_df)
# create a function that takes in a dataset as a parameter and returns a list in
# the form of a table. Here, the table shows
summary_info <- function(dataset) {
summary <- list()
summary$total_observations <- nrow(dataset)
summary$lowest_score <- dataset %>%
filter(dataset$OVERALL_SCORE == min(dataset$OVERALL_SCORE, na.rm = T))
return(summary)
}
summary <- list()
summary$total_observations <- nrow(dataset)
summary$lowest_score <- dataset %>%
filter(dataset$OVERALL_SCORE == min(dataset$OVERALL_SCORE, na.rm = T))
# create a function that takes in a dataset as a parameter and returns a list in
# the form of a table. Here, the table shows
summary_info <- function(dataset) {
summary <- list()
summary$total_observations <- nrow(dataset)
summary$lowest_score <- dataset %>%
group_by(Primary.Type) %>%
summarise(Freq = n()) %>%
arrange(desc(Freq)) %>%
head(1) %>%
select(Primary.Type)
return(summary)
}
summary
summary
summary
summary
summary
summary
# create a function that takes in a dataset as a parameter and returns a list in
# the form of a table. Here, the table shows
summary_info <- function(dataset) {
summary <- list()
summary$total_observations <- nrow(dataset)
summary$lowest_score <- min(dataset$OVERALL_SCORE)
return(summary)
}
summary <- list()
summary$total_observations <- nrow(dataset)
summary$lowest_score <- min(dataset$OVERALL_SCORE)
num <- summary_info(GHSindex_summary)
summary <- list()
summary$total_observations <- nrow(dataset)
summary$overall <- dataset %>%
group_by(OVERALL_SCORE) %>%
summarise(num = n()) %>%
select(num) / nrow(dataset) * 100
#Dataset is in a different folder,must call
# Pass in dataset and store in a dataframe variable
GHSindex_summary <- read.csv("data/2021-GHS-Index-April-2022.csv")
View(GHSindex_summary)
summary <- list()
summary$total_observations <- nrow(dataset)
summary$overall <- dataset %>%
group_by(OVERALL.SCORE) %>%
summarise(num = n()) %>%
select(num) / nrow(dataset) * 100
summary$total_observations <- nrow(dataset)
overall_score_df <- select(GHSindex_summary, OVERALL.SCORE)
summary$min_value <- min(overall_score_df)
return(summary)
overall_score_df <- select(GHSindex_summary, OVERALL.SCORE)
summary$min_value <- min(overall_score_df)
summary$min_value'
summary$min_value
summary$min_value
# create a function that takes in a dataset as a parameter and returns a list in
# the form of a table. Here, the table shows
summary_info <- function(dataset) {
summary <- list()
summary$total_observations <- nrow(dataset)
summary$overall_Score <- dataset %>%
group_by(OVERALL.SCORE) %>%
summarise(num = n())
#  overall_score_df <- select(GHSindex_summary, OVERALL.SCORE)
#  summary$min_value <- min(overall_score_df)
return(summary)
}
summary_info(GHSindex_summary)
n <- summary_info(GHSindex_summary)
n
n
summary$lowest_Score <- dataset %>%
group_by(OVERALL.SCORE) %>%
summarise(Freq = n()) %>%
arrange(desc(Freq)) %>%
head(1) %>%
select(OVERALL.SCORE)
summary$lowest_Score <- dataset %>%
group_by(OVERALL.SCORE) %>%
summarise(Freq = n()) %>%
arrange(desc(Freq)) %>%
head(1) %>%
select(OVERALL.SCORE)
#Dataset is in a different folder, must call
# sort the dataframe and select the desirable columns and write into a new csv file
# pass in dataset and store in a dataframe variable
read.csv("data/2021-GHS-Index-April-2022.csv")
sorted_df <- df %>%
select(Country, Year, OVERALL.SCORE) %>%
as.data.frame()
GHSindex_summary <- write.csv(df_new,"2021-GHS-Index-April-2022.csv")
#1) Read in the female baby names data file into a variable called `names`
names_df <- read.csv("female_names.csv")
#2) Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013_df <- filter(names_df, year == 2013)
#3) write in a comment the question "What was the most popular female name in 2013?" and answer.
max_pop <- max(names_2013_df$prop)
# create a function that takes in a dataset as a parameter and returns a list in
# the form of a table. Here, the table shows
summary_info <- function(dataset) {
summary <- list()
summary$total_observations <- nrow(dataset)
summary$overall_Score <- dataset %>%
group_by(OVERALL.SCORE) %>%
summarise(score = n())
summary$lowest_Score <- dataset %>%
group_by(OVERALL.SCORE) %>%
summarise(low = n()) %>%
arrange(low) %>%
head(1) %>%
select(Country)
summary$highest_Score <- dataset %>%
summarise(high = n()) %>%
arrange(desc(high)) %>%
head(1) %>%
select(Country)
summary$avg_Score <- dataset %>%
summarise(avg = mean(OVERALL.SCORE)) %>%
arrange(avg) %>%
head(1) %>%
select(OVERALL.SCORE)
return(summary)
}
summary$avg_Score <- dataset %>%
summarise(avg = mean(OVERALL.SCORE)) %>%
arrange(avg) %>%
head(1) %>%
select(OVERALL.SCORE)
summary$avg_Score <- dataset %>%
summarise(avg = mean(OVERALL.SCORE)) %>%
arrange(avg) %>%
head(1) %>%
select(OVERALL.SCORE)
#1) Read in the female baby names data file into a variable called `names`
names_df <- read.csv("female_names.csv")
#2) Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013_df <- filter(names_df, year == 2013)
# dataset is in a different folder, must call folder in order to access
# sort the dataframe and select the wanted columns and write into a new csv file
# pass in dataset and store in a dataframe variable
read.csv("data/2021-GHS-Index-April-2022.csv")
sorted_df <- df %>%
select(Country, Year, OVERALL.SCORE) %>%
as.data.frame()
GHSindex_summary <- write.csv(df_new,"GHSINDEX.csv")
